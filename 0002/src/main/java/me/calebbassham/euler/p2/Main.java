package me.calebbassham.euler.p2;

import java.util.ArrayList;
import java.util.stream.IntStream;

/**
 * PROBLEM 2
 *
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
public class Main {

    public static void main(String[] args) {
        System.out.println(new Main().problem());
    }

    private int sumEvenFibonacci(int ceil) {
        return fibonacci(ceil)
                .filter(i -> i % 2 == 0)
                .sum();
    }

    public int example() {
        return sumEvenFibonacci(100);
    }

    public int problem() {
        return sumEvenFibonacci(4_000_000);
    }

    private IntStream fibonacci(int max) {
        var list = new ArrayList<Integer>();
        list.add(1);
        list.add(2);

        while (true) {
            var last = list.get(list.size() - 1);
            var twoBack = list.get(list.size() - 2);

            var next = last + twoBack;

            if (next > max) break;
            list.add(next);
        }

        return list.stream().mapToInt(Integer::intValue);
    }

}
